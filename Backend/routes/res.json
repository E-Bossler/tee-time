{
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
        },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      paused: true,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrain: 0,
      readingMore: true,
      decoder: null,
      encoding: null
    },
    readable: true,
    _events: [Object: null prototype
    ] {
      end: [Function: resetHeadersTimeoutOnReqEnd
        ]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      _server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
        parsingHeadersStart: 0
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
            ],
        locals: [Object: null prototype
            ] {},
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(isCorked)
            ]: false,
            [Symbol(kOutHeaders)
            ]: [Object: null prototype
            ]
        },
        [Symbol(asyncId)
        ]: 303,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 213030,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(asyncId)
            ]: 304,
            [Symbol(triggerId)
            ]: 303
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      _server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
        parsingHeadersStart: 0
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
            ],
        locals: [Object: null prototype
            ] {},
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(isCorked)
            ]: false,
            [Symbol(kOutHeaders)
            ]: [Object: null prototype
            ]
        },
        [Symbol(asyncId)
        ]: 303,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 213030,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(asyncId)
            ]: 304,
            [Symbol(triggerId)
            ]: 303
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      'x-forwarded-host': 'localhost: 3000',
      'x-forwarded-proto': 'http',
      'x-forwarded-port': '3000',
      'x-forwarded-for': '127.0.0.1',
      'if-none-match': 'W/"2c-bAuPoU3iMeGY5rQMJcLR371tE7E"',
      'accept-language': 'en-US,en;q=0.9',
      'accept-encoding': 'gzip, deflate, br',
      referer: 'http: //localhost:3000/dashboard',
      'sec-fetch-dest': 'empty',
      'sec-fetch-mode': 'cors',
      'sec-fetch-site': 'same-origin',
      'user-agent': 'Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36',
      accept: 'application/json, text/plain, * /*',
      connection: 'close',
      host: 'localhost:7777'
    },
    rawHeaders: [
      'x-forwarded-host',
      'localhost:3000',
      'x-forwarded-proto',
      'http',
      'x-forwarded-port',
      '3000',
      'x-forwarded-for',
      '127.0.0.1',
      'if-none-match',
      'W/"2c-bAuPoU3iMeGY5rQMJcLR371tE7E"',
      'accept-language',
      'en-US,en;q=0.9',
      'accept-encoding',
      'gzip, deflate, br',
      'referer',
      'http://localhost:3000/dashboard',
      'sec-fetch-dest',
      'empty',
      'sec-fetch-mode',
      'cors',
      'sec-fetch-site',
      'same-origin',
      'user-agent',
      'Mozilla/5.0 (Linux; Android 8.0; Pixel 2 Build/OPD3.170816.012) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Mobile Safari/537.36',
      'accept',
      'application/json, text/plain, */*',
      'connection',
      'close',
      'host',
      'localhost: 7777'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/account/verify',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0
            },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
        },
      readable: true,
      _events: [Object: null prototype
        ] {
        end: [Array
            ],
        timeout: [Function: socketOnTimeout
            ],
        data: [Function: bound socketOnData
            ],
        error: [Function: socketOnError
            ],
        close: [Array
            ],
        drain: [Function: bound socketOnDrain
            ],
        resume: [Function: onSocketResume
            ],
        pause: [Function: onSocketPause
            ]
        },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite
            ],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object
            ]
        },
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      _server: Server {
        _events: [Object: null prototype
            ],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP
            ],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6: : : : 7777',
            [Symbol(IncomingMessage)
            ]: [Function: IncomingMessage
            ],
            [Symbol(ServerResponse)
            ]: [Function: ServerResponse
            ],
            [Symbol(asyncId)
            ]: 19
        },
      timeout: 120000,
      parser: HTTPParser {
        '0': [Function: parserOnHeaders
            ],
        '1': [Function: parserOnHeadersComplete
            ],
        '2': [Function: parserOnBody
            ],
        '3': [Function: parserOnMessageComplete
            ],
        '4': [Function: bound onParserExecute
            ],
        _headers: [],
        _url: '',
        socket: [Circular
            ],
        incoming: [Circular
            ],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming
            ],
        parsingHeadersStart: 0
        },
      on: [Function: socketListenerWrap
        ],
      addListener: [Function: socketListenerWrap
        ],
      prependListener: [Function: socketListenerWrap
        ],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype
            ],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular
            ],
        connection: [Circular
            ],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData
            ],
        _sent100: false,
        _expect_continue: false,
        req: [Circular
            ],
        locals: [Object: null prototype
            ] {},
            [Symbol(kNeedDrain)
            ]: false,
            [Symbol(isCorked)
            ]: false,
            [Symbol(kOutHeaders)
            ]: [Object: null prototype
            ]
        },
        [Symbol(asyncId)
        ]: 303,
        [Symbol(kHandle)
        ]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
            [Symbol(owner)
            ]: [Circular
            ]
        },
        [Symbol(lastWriteQueueSize)
        ]: 0,
        [Symbol(timeout)
        ]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList
            ],
        _idleNext: [TimersList
            ],
        _idleStart: 213030,
        _onTimeout: [Function: bound
            ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
            [Symbol(refed)
            ]: false,
            [Symbol(asyncId)
            ]: 304,
            [Symbol(triggerId)
            ]: 303
        },
        [Symbol(kBuffer)
        ]: null,
        [Symbol(kBufferCb)
        ]: null,
        [Symbol(kBufferGen)
        ]: null,
        [Symbol(kBytesRead)
        ]: 0,
        [Symbol(kBytesWritten)
        ]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next
    ],
    baseUrl: '/api',
    originalUrl: '/api/account/verify',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/account/verify',
      path: '/account/verify',
      href: '/account/verify',
      _raw: '/account/verify'
    },
    params: {},
    query: {},
    res: ServerResponse {
      _events: [Object: null prototype
        ] { finish: [Function: bound resOnFinish
            ]
        },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState
            ],
        readable: true,
        _events: [Object: null prototype
            ],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState
            ],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server
            ],
        _server: [Server
            ],
        timeout: 120000,
        parser: [HTTPParser
            ],
        on: [Function: socketListenerWrap
            ],
        addListener: [Function: socketListenerWrap
            ],
        prependListener: [Function: socketListenerWrap
            ],
        _paused: false,
        _httpMessage: [Circular
            ],
            [Symbol(asyncId)
            ]: 303,
            [Symbol(kHandle)
            ]: [TCP
            ],
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]: Timeout {
          _idleTimeout: 120000,
          _idlePrev: [TimersList
                ],
          _idleNext: [TimersList
                ],
          _idleStart: 213030,
          _onTimeout: [Function: bound
                ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
                [Symbol(refed)
                ]: false,
                [Symbol(asyncId)
                ]: 304,
                [Symbol(triggerId)
                ]: 303
            },
            [Symbol(kBuffer)
            ]: null,
            [Symbol(kBufferCb)
            ]: null,
            [Symbol(kBufferGen)
            ]: null,
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
      connection: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState
            ],
        readable: true,
        _events: [Object: null prototype
            ],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState
            ],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server
            ],
        _server: [Server
            ],
        timeout: 120000,
        parser: [HTTPParser
            ],
        on: [Function: socketListenerWrap
            ],
        addListener: [Function: socketListenerWrap
            ],
        prependListener: [Function: socketListenerWrap
            ],
        _paused: false,
        _httpMessage: [Circular
            ],
            [Symbol(asyncId)
            ]: 303,
            [Symbol(kHandle)
            ]: [TCP
            ],
            [Symbol(lastWriteQueueSize)
            ]: 0,
            [Symbol(timeout)
            ]: Timeout {
          _idleTimeout: 120000,
          _idlePrev: [TimersList
                ],
          _idleNext: [TimersList
                ],
          _idleStart: 213030,
          _onTimeout: [Function: bound
                ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
                [Symbol(refed)
                ]: false,
                [Symbol(asyncId)
                ]: 304,
                [Symbol(triggerId)
                ]: 303
            },
            [Symbol(kBuffer)
            ]: null,
            [Symbol(kBufferCb)
            ]: null,
            [Symbol(kBufferGen)
            ]: null,
            [Symbol(kBytesRead)
            ]: 0,
            [Symbol(kBytesWritten)
            ]: 0
        },
      _header: null,
      _onPendingData: [Function: bound updateOutgoingData
        ],
      _sent100: false,
      _expect_continue: false,
      req: [Circular
        ],
      locals: [Object: null prototype
        ] {},
        [Symbol(kNeedDrain)
        ]: false,
        [Symbol(isCorked)
        ]: false,
        [Symbol(kOutHeaders)
        ]: [Object: null prototype
        ] { 'x-powered-by': [Array
            ]
        }
    },
    body: {},
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/api/account/verify',
      path: '/api/account/verify',
      href: '/api/account/verify',
      _raw: '/api/account/verify'
    },
    route: Route {
      path: '/account/verify',
      stack: [
            [Layer
            ]
        ],
      methods: { get: true
        }
    }
}